#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Feb 13 17:18:09 2020 by generateDS.py version 2.30.15.
# Python 3.6.7 (default, Oct 22 2018, 11:32:17)  [GCC 8.2.0]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('--no-collect-includes', '')
#   ('--use-getter-setter', 'none')
#   ('-f', '')
#   ('-o', '/home/kmee/kmee/product/dfe/nfelib/nfelib/v4_00/leiauteConsNFeDest_v1.01.py')
#
# Command line arguments:
#   /home/kmee/kmee/product/dfe/nfelib/process_includes/leiauteConsNFeDest_v1.01.xsd
#
# Command line:
#   /home/kmee/kmee/product/dfe/bin/erpbrasil-edoc-gen-generate-python --no-namespace-defs --no-collect-includes --use-getter-setter="none" -f -o "/home/kmee/kmee/product/dfe/nfelib/nfelib/v4_00/leiauteConsNFeDest_v1.01.py" /home/kmee/kmee/product/dfe/nfelib/process_includes/leiauteConsNFeDest_v1.01.xsd
#
# Current working directory (os.getcwd()):
#   nfelib
#

import os
import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ImportError:
    GenerateDSNamespaceTypePrefixes_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class TCOrgaoIBGE(object):
    _1_1='11'
    _1_2='12'
    _1_3='13'
    _1_4='14'
    _1_5='15'
    _1_6='16'
    _1_7='17'
    _2_1='21'
    _2_2='22'
    _2_3='23'
    _2_4='24'
    _2_5='25'
    _2_6='26'
    _2_7='27'
    _2_8='28'
    _2_9='29'
    _3_1='31'
    _3_2='32'
    _3_3='33'
    _3_5='35'
    _4_1='41'
    _4_2='42'
    _4_3='43'
    _5_0='50'
    _5_1='51'
    _5_2='52'
    _5_3='53'
    _9_0='90'
    _9_1='91'


class TVeConsNFeDest(object):
    _1_01='1.01'


class cSitConfType(object):
    _0='0'
    _1='1'
    _2='2'
    _3='3'
    _4='4'


class cSitConfType6(object):
    _0='0'
    _1='1'
    _2='2'
    _3='3'
    _4='4'


class cSitNFeType(object):
    _1='1'
    _2='2'
    _3='3'


class cSitNFeType5(object):
    _3='3'


class indContType(object):
    _0='0'
    _1='1'


class indEmiType(object):
    _0='0'
    _1='1'


class indNFeType(object):
    _0='0'
    _1='1'
    _2='2'


class tpEventoType(object):
    _1_10110='110110'


class tpNFType(object):
    _0='0'
    _1='1'


class tpNFType3(object):
    _0='0'
    _1='1'


class tpNFType7(object):
    _0='0'
    _1='1'


class xServType(object):
    CONSULTARNFEDEST='CONSULTAR NFE DEST'


class TConsNFeDest(GeneratedsSuper):
    """Tipo Pedido de Consulta de Nota Fiscal Eletrônica"""
    subclass = None
    superclass = None
    def __init__(self, versao=None, tpAmb=None, xServ=None, CNPJ=None, indNFe=None, indEmi=None, ultNSU=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.versao = _cast(None, versao)
        self.tpAmb = tpAmb
        self.xServ = xServ
        self.validate_xServType(self.xServ)
        self.CNPJ = CNPJ
        self.indNFe = indNFe
        self.validate_indNFeType(self.indNFe)
        self.indEmi = indEmi
        self.validate_indEmiType(self.indEmi)
        self.ultNSU = ultNSU
        self.validate_ultNSUType(self.ultNSU)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TConsNFeDest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TConsNFeDest.subclass:
            return TConsNFeDest.subclass(*args_, **kwargs_)
        else:
            return TConsNFeDest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_xServType(self, value):
        # Validate type xServType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CONSULTAR NFE DEST']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on xServType' % {"value" : value.encode("utf-8")} )
    def validate_indNFeType(self, value):
        # Validate type indNFeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on indNFeType' % {"value" : value.encode("utf-8")} )
    def validate_indEmiType(self, value):
        # Validate type indEmiType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on indEmiType' % {"value" : value.encode("utf-8")} )
    def validate_ultNSUType(self, value):
        # Validate type ultNSUType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_ultNSUType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_ultNSUType_patterns_, ))
    validate_ultNSUType_patterns_ = [['^[0-9]{1,15}$']]
    def validate_TVeConsNFeDest(self, value):
        # Validate type TVeConsNFeDest, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1.01']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TVeConsNFeDest' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.tpAmb is not None or
            self.xServ is not None or
            self.CNPJ is not None or
            self.indNFe is not None or
            self.indEmi is not None or
            self.ultNSU is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TConsNFeDest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TConsNFeDest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TConsNFeDest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TConsNFeDest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TConsNFeDest'):
        if self.versao is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            outfile.write(' versao=%s' % (quote_attrib(self.versao), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TConsNFeDest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.tpAmb is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stpAmb>%s</%stpAmb>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.tpAmb), input_name='tpAmb')), namespaceprefix_ , eol_))
        if self.xServ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sxServ>%s</%sxServ>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.xServ), input_name='xServ')), namespaceprefix_ , eol_))
        if self.CNPJ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCNPJ>%s</%sCNPJ>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CNPJ), input_name='CNPJ')), namespaceprefix_ , eol_))
        if self.indNFe is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindNFe>%s</%sindNFe>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.indNFe), input_name='indNFe')), namespaceprefix_ , eol_))
        if self.indEmi is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindEmi>%s</%sindEmi>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.indEmi), input_name='indEmi')), namespaceprefix_ , eol_))
        if self.ultNSU is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sultNSU>%s</%sultNSU>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ultNSU), input_name='ultNSU')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('versao', node)
        if value is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            self.versao = value
            self.validate_TVeConsNFeDest(self.versao)    # validate type TVeConsNFeDest
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tpAmb':
            tpAmb_ = child_.text
            tpAmb_ = self.gds_validate_string(tpAmb_, node, 'tpAmb')
            self.tpAmb = tpAmb_
        elif nodeName_ == 'xServ':
            xServ_ = child_.text
            xServ_ = self.gds_validate_string(xServ_, node, 'xServ')
            self.xServ = xServ_
            # validate type xServType
            self.validate_xServType(self.xServ)
        elif nodeName_ == 'CNPJ':
            CNPJ_ = child_.text
            CNPJ_ = self.gds_validate_string(CNPJ_, node, 'CNPJ')
            self.CNPJ = CNPJ_
        elif nodeName_ == 'indNFe':
            indNFe_ = child_.text
            indNFe_ = self.gds_validate_string(indNFe_, node, 'indNFe')
            self.indNFe = indNFe_
            # validate type indNFeType
            self.validate_indNFeType(self.indNFe)
        elif nodeName_ == 'indEmi':
            indEmi_ = child_.text
            indEmi_ = self.gds_validate_string(indEmi_, node, 'indEmi')
            self.indEmi = indEmi_
            # validate type indEmiType
            self.validate_indEmiType(self.indEmi)
        elif nodeName_ == 'ultNSU':
            ultNSU_ = child_.text
            ultNSU_ = self.gds_validate_string(ultNSU_, node, 'ultNSU')
            self.ultNSU = ultNSU_
            # validate type ultNSUType
            self.validate_ultNSUType(self.ultNSU)
# end class TConsNFeDest


class TRetConsNFeDest(GeneratedsSuper):
    """Tipo Retorno do pedido de Consulta de Nota Fiscal Eletrônica"""
    subclass = None
    superclass = None
    def __init__(self, versao=None, tpAmb=None, verAplic=None, cStat=None, xMotivo=None, dhResp=None, indCont=None, ultNSU=None, ret=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.versao = _cast(None, versao)
        self.tpAmb = tpAmb
        self.verAplic = verAplic
        self.cStat = cStat
        self.xMotivo = xMotivo
        if isinstance(dhResp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dhResp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = dhResp
        self.dhResp = initvalue_
        self.indCont = indCont
        self.validate_indContType(self.indCont)
        self.ultNSU = ultNSU
        self.validate_ultNSUType1(self.ultNSU)
        if ret is None:
            self.ret = []
        else:
            self.ret = ret
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TRetConsNFeDest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TRetConsNFeDest.subclass:
            return TRetConsNFeDest.subclass(*args_, **kwargs_)
        else:
            return TRetConsNFeDest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_indContType(self, value):
        # Validate type indContType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on indContType' % {"value" : value.encode("utf-8")} )
    def validate_ultNSUType1(self, value):
        # Validate type ultNSUType1, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_ultNSUType1_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_ultNSUType1_patterns_, ))
    validate_ultNSUType1_patterns_ = [['^[1-9][0-9]{0,14}$']]
    def validate_TVeConsNFeDest(self, value):
        # Validate type TVeConsNFeDest, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1.01']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TVeConsNFeDest' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.tpAmb is not None or
            self.verAplic is not None or
            self.cStat is not None or
            self.xMotivo is not None or
            self.dhResp is not None or
            self.indCont is not None or
            self.ultNSU is not None or
            self.ret
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TRetConsNFeDest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TRetConsNFeDest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TRetConsNFeDest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TRetConsNFeDest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TRetConsNFeDest'):
        if self.versao is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            outfile.write(' versao=%s' % (quote_attrib(self.versao), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TRetConsNFeDest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.tpAmb is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stpAmb>%s</%stpAmb>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.tpAmb), input_name='tpAmb')), namespaceprefix_ , eol_))
        if self.verAplic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sverAplic>%s</%sverAplic>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.verAplic), input_name='verAplic')), namespaceprefix_ , eol_))
        if self.cStat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scStat>%s</%scStat>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.cStat), input_name='cStat')), namespaceprefix_ , eol_))
        if self.xMotivo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sxMotivo>%s</%sxMotivo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.xMotivo), input_name='xMotivo')), namespaceprefix_ , eol_))
        if self.dhResp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdhResp>%s</%sdhResp>%s' % (namespaceprefix_ , self.gds_format_datetime(self.dhResp, input_name='dhResp'), namespaceprefix_ , eol_))
        if self.indCont is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindCont>%s</%sindCont>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.indCont), input_name='indCont')), namespaceprefix_ , eol_))
        if self.ultNSU is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sultNSU>%s</%sultNSU>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ultNSU), input_name='ultNSU')), namespaceprefix_ , eol_))
        for ret_ in self.ret:
            ret_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ret', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('versao', node)
        if value is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            self.versao = value
            self.validate_TVeConsNFeDest(self.versao)    # validate type TVeConsNFeDest
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tpAmb':
            tpAmb_ = child_.text
            tpAmb_ = self.gds_validate_string(tpAmb_, node, 'tpAmb')
            self.tpAmb = tpAmb_
        elif nodeName_ == 'verAplic':
            verAplic_ = child_.text
            verAplic_ = self.gds_validate_string(verAplic_, node, 'verAplic')
            self.verAplic = verAplic_
        elif nodeName_ == 'cStat':
            cStat_ = child_.text
            cStat_ = self.gds_validate_string(cStat_, node, 'cStat')
            self.cStat = cStat_
        elif nodeName_ == 'xMotivo':
            xMotivo_ = child_.text
            xMotivo_ = self.gds_validate_string(xMotivo_, node, 'xMotivo')
            self.xMotivo = xMotivo_
        elif nodeName_ == 'dhResp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.dhResp = dval_
        elif nodeName_ == 'indCont':
            indCont_ = child_.text
            indCont_ = self.gds_validate_string(indCont_, node, 'indCont')
            self.indCont = indCont_
            # validate type indContType
            self.validate_indContType(self.indCont)
        elif nodeName_ == 'ultNSU':
            ultNSU_ = child_.text
            ultNSU_ = self.gds_validate_string(ultNSU_, node, 'ultNSU')
            self.ultNSU = ultNSU_
            # validate type ultNSUType1
            self.validate_ultNSUType1(self.ultNSU)
        elif nodeName_ == 'ret':
            obj_ = retType.factory(parent_object_=self)
            obj_.build(child_)
            self.ret.append(obj_)
            obj_.original_tagname_ = 'ret'
# end class TRetConsNFeDest


class retType(GeneratedsSuper):
    """Resumo de NF-e ou CC-e"""
    subclass = None
    superclass = None
    def __init__(self, resNFe=None, resCanc=None, resCCe=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.resNFe = resNFe
        self.resCanc = resCanc
        self.resCCe = resCCe
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, retType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if retType.subclass:
            return retType.subclass(*args_, **kwargs_)
        else:
            return retType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.resNFe is not None or
            self.resCanc is not None or
            self.resCCe is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='retType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('retType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='retType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='retType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='retType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='retType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.resNFe is not None:
            self.resNFe.export(outfile, level, namespaceprefix_, namespacedef_='', name_='resNFe', pretty_print=pretty_print)
        if self.resCanc is not None:
            self.resCanc.export(outfile, level, namespaceprefix_, namespacedef_='', name_='resCanc', pretty_print=pretty_print)
        if self.resCCe is not None:
            self.resCCe.export(outfile, level, namespaceprefix_, namespacedef_='', name_='resCCe', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resNFe':
            obj_ = resNFeType.factory(parent_object_=self)
            obj_.build(child_)
            self.resNFe = obj_
            obj_.original_tagname_ = 'resNFe'
        elif nodeName_ == 'resCanc':
            obj_ = resCancType.factory(parent_object_=self)
            obj_.build(child_)
            self.resCanc = obj_
            obj_.original_tagname_ = 'resCanc'
        elif nodeName_ == 'resCCe':
            obj_ = resCCeType.factory(parent_object_=self)
            obj_.build(child_)
            self.resCCe = obj_
            obj_.original_tagname_ = 'resCCe'
# end class retType


class resNFeType(GeneratedsSuper):
    """Informações resumo da NF-e localizadas"""
    subclass = None
    superclass = None
    def __init__(self, NSU=None, chNFe=None, CNPJ=None, CPF=None, xNome=None, IE=None, dEmi=None, tpNF=None, vNF=None, digVal=None, dhRecbto=None, cSitNFe=None, cSitConf=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.NSU = _cast(None, NSU)
        self.chNFe = chNFe
        self.CNPJ = CNPJ
        self.CPF = CPF
        self.xNome = xNome
        self.validate_xNomeType(self.xNome)
        self.IE = IE
        self.dEmi = dEmi
        self.tpNF = tpNF
        self.validate_tpNFType(self.tpNF)
        self.vNF = vNF
        self.digVal = digVal
        self.validate_digValType(self.digVal)
        if isinstance(dhRecbto, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dhRecbto, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = dhRecbto
        self.dhRecbto = initvalue_
        self.cSitNFe = cSitNFe
        self.validate_cSitNFeType(self.cSitNFe)
        self.cSitConf = cSitConf
        self.validate_cSitConfType(self.cSitConf)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resNFeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resNFeType.subclass:
            return resNFeType.subclass(*args_, **kwargs_)
        else:
            return resNFeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_xNomeType(self, value):
        # Validate type xNomeType, a restriction on TString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on xNomeType' % {"value" : value} )
            if len(str(value)) < 3:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on xNomeType' % {"value" : value} )
    def validate_tpNFType(self, value):
        # Validate type tpNFType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on tpNFType' % {"value" : value.encode("utf-8")} )
    def validate_digValType(self, value):
        # Validate type digValType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 28:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on digValType' % {"value" : value.encode("utf-8")} )
    def validate_cSitNFeType(self, value):
        # Validate type cSitNFeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on cSitNFeType' % {"value" : value.encode("utf-8")} )
    def validate_cSitConfType(self, value):
        # Validate type cSitConfType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2', '3', '4']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on cSitConfType' % {"value" : value.encode("utf-8")} )
    def validate_TNSU(self, value):
        # Validate type TNSU, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_TNSU_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_TNSU_patterns_, ))
    validate_TNSU_patterns_ = [['^[0-9]{1,15}$']]
    def hasContent_(self):
        if (
            self.chNFe is not None or
            self.CNPJ is not None or
            self.CPF is not None or
            self.xNome is not None or
            self.IE is not None or
            self.dEmi is not None or
            self.tpNF is not None or
            self.vNF is not None or
            self.digVal is not None or
            self.dhRecbto is not None or
            self.cSitNFe is not None or
            self.cSitConf is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resNFeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resNFeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resNFeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resNFeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resNFeType'):
        if self.NSU is not None and 'NSU' not in already_processed:
            already_processed.add('NSU')
            outfile.write(' NSU=%s' % (quote_attrib(self.NSU), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resNFeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.chNFe is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%schNFe>%s</%schNFe>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.chNFe), input_name='chNFe')), namespaceprefix_ , eol_))
        if self.CNPJ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCNPJ>%s</%sCNPJ>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CNPJ), input_name='CNPJ')), namespaceprefix_ , eol_))
        if self.CPF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCPF>%s</%sCPF>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CPF), input_name='CPF')), namespaceprefix_ , eol_))
        if self.xNome is not None:
            self.xNome.export(outfile, level, namespaceprefix_, namespacedef_='', name_='xNome', pretty_print=pretty_print)
        if self.IE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIE>%s</%sIE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IE), input_name='IE')), namespaceprefix_ , eol_))
        if self.dEmi is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdEmi>%s</%sdEmi>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.dEmi), input_name='dEmi')), namespaceprefix_ , eol_))
        if self.tpNF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stpNF>%s</%stpNF>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.tpNF), input_name='tpNF')), namespaceprefix_ , eol_))
        if self.vNF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svNF>%s</%svNF>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.vNF), input_name='vNF')), namespaceprefix_ , eol_))
        if self.digVal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdigVal>%s</%sdigVal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.digVal), input_name='digVal')), namespaceprefix_ , eol_))
        if self.dhRecbto is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdhRecbto>%s</%sdhRecbto>%s' % (namespaceprefix_ , self.gds_format_datetime(self.dhRecbto, input_name='dhRecbto'), namespaceprefix_ , eol_))
        if self.cSitNFe is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scSitNFe>%s</%scSitNFe>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.cSitNFe), input_name='cSitNFe')), namespaceprefix_ , eol_))
        if self.cSitConf is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scSitConf>%s</%scSitConf>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.cSitConf), input_name='cSitConf')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('NSU', node)
        if value is not None and 'NSU' not in already_processed:
            already_processed.add('NSU')
            self.NSU = value
            self.validate_TNSU(self.NSU)    # validate type TNSU
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'chNFe':
            chNFe_ = child_.text
            chNFe_ = self.gds_validate_string(chNFe_, node, 'chNFe')
            self.chNFe = chNFe_
        elif nodeName_ == 'CNPJ':
            CNPJ_ = child_.text
            CNPJ_ = self.gds_validate_string(CNPJ_, node, 'CNPJ')
            self.CNPJ = CNPJ_
        elif nodeName_ == 'CPF':
            CPF_ = child_.text
            CPF_ = self.gds_validate_string(CPF_, node, 'CPF')
            self.CPF = CPF_
        elif nodeName_ == 'xNome':
            obj_ = None
            self.xNome = obj_
            obj_.original_tagname_ = 'xNome'
            # validate type xNomeType
            self.validate_xNomeType(self.xNome)
        elif nodeName_ == 'IE':
            IE_ = child_.text
            IE_ = self.gds_validate_string(IE_, node, 'IE')
            self.IE = IE_
        elif nodeName_ == 'dEmi':
            dEmi_ = child_.text
            dEmi_ = self.gds_validate_string(dEmi_, node, 'dEmi')
            self.dEmi = dEmi_
        elif nodeName_ == 'tpNF':
            tpNF_ = child_.text
            tpNF_ = self.gds_validate_string(tpNF_, node, 'tpNF')
            self.tpNF = tpNF_
            # validate type tpNFType
            self.validate_tpNFType(self.tpNF)
        elif nodeName_ == 'vNF':
            vNF_ = child_.text
            vNF_ = self.gds_validate_string(vNF_, node, 'vNF')
            self.vNF = vNF_
        elif nodeName_ == 'digVal':
            digVal_ = child_.text
            digVal_ = self.gds_validate_string(digVal_, node, 'digVal')
            self.digVal = digVal_
            # validate type digValType
            self.validate_digValType(self.digVal)
        elif nodeName_ == 'dhRecbto':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.dhRecbto = dval_
        elif nodeName_ == 'cSitNFe':
            cSitNFe_ = child_.text
            cSitNFe_ = self.gds_validate_string(cSitNFe_, node, 'cSitNFe')
            self.cSitNFe = cSitNFe_
            # validate type cSitNFeType
            self.validate_cSitNFeType(self.cSitNFe)
        elif nodeName_ == 'cSitConf':
            cSitConf_ = child_.text
            cSitConf_ = self.gds_validate_string(cSitConf_, node, 'cSitConf')
            self.cSitConf = cSitConf_
            # validate type cSitConfType
            self.validate_cSitConfType(self.cSitConf)
# end class resNFeType


class resCancType(GeneratedsSuper):
    """Informações resumo da NF-e canceladas localizadas"""
    subclass = None
    superclass = None
    def __init__(self, NSU=None, chNFe=None, CNPJ=None, CPF=None, xNome=None, IE=None, dEmi=None, tpNF=None, vNF=None, digVal=None, dhRecbto=None, cSitNFe=None, cSitConf=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.NSU = _cast(None, NSU)
        self.chNFe = chNFe
        self.CNPJ = CNPJ
        self.CPF = CPF
        self.xNome = xNome
        self.validate_xNomeType2(self.xNome)
        self.IE = IE
        self.dEmi = dEmi
        self.tpNF = tpNF
        self.validate_tpNFType3(self.tpNF)
        self.vNF = vNF
        self.digVal = digVal
        self.validate_digValType4(self.digVal)
        if isinstance(dhRecbto, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dhRecbto, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = dhRecbto
        self.dhRecbto = initvalue_
        self.cSitNFe = cSitNFe
        self.validate_cSitNFeType5(self.cSitNFe)
        self.cSitConf = cSitConf
        self.validate_cSitConfType6(self.cSitConf)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resCancType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resCancType.subclass:
            return resCancType.subclass(*args_, **kwargs_)
        else:
            return resCancType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_xNomeType2(self, value):
        # Validate type xNomeType2, a restriction on TString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on xNomeType2' % {"value" : value} )
            if len(str(value)) < 3:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on xNomeType2' % {"value" : value} )
    def validate_tpNFType3(self, value):
        # Validate type tpNFType3, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on tpNFType3' % {"value" : value.encode("utf-8")} )
    def validate_digValType4(self, value):
        # Validate type digValType4, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 28:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on digValType4' % {"value" : value.encode("utf-8")} )
    def validate_cSitNFeType5(self, value):
        # Validate type cSitNFeType5, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on cSitNFeType5' % {"value" : value.encode("utf-8")} )
    def validate_cSitConfType6(self, value):
        # Validate type cSitConfType6, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2', '3', '4']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on cSitConfType6' % {"value" : value.encode("utf-8")} )
    def validate_TNSU(self, value):
        # Validate type TNSU, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_TNSU_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_TNSU_patterns_, ))
    validate_TNSU_patterns_ = [['^[0-9]{1,15}$']]
    def hasContent_(self):
        if (
            self.chNFe is not None or
            self.CNPJ is not None or
            self.CPF is not None or
            self.xNome is not None or
            self.IE is not None or
            self.dEmi is not None or
            self.tpNF is not None or
            self.vNF is not None or
            self.digVal is not None or
            self.dhRecbto is not None or
            self.cSitNFe is not None or
            self.cSitConf is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resCancType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resCancType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resCancType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resCancType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resCancType'):
        if self.NSU is not None and 'NSU' not in already_processed:
            already_processed.add('NSU')
            outfile.write(' NSU=%s' % (quote_attrib(self.NSU), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resCancType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.chNFe is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%schNFe>%s</%schNFe>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.chNFe), input_name='chNFe')), namespaceprefix_ , eol_))
        if self.CNPJ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCNPJ>%s</%sCNPJ>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CNPJ), input_name='CNPJ')), namespaceprefix_ , eol_))
        if self.CPF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCPF>%s</%sCPF>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CPF), input_name='CPF')), namespaceprefix_ , eol_))
        if self.xNome is not None:
            self.xNome.export(outfile, level, namespaceprefix_, namespacedef_='', name_='xNome', pretty_print=pretty_print)
        if self.IE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIE>%s</%sIE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IE), input_name='IE')), namespaceprefix_ , eol_))
        if self.dEmi is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdEmi>%s</%sdEmi>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.dEmi), input_name='dEmi')), namespaceprefix_ , eol_))
        if self.tpNF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stpNF>%s</%stpNF>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.tpNF), input_name='tpNF')), namespaceprefix_ , eol_))
        if self.vNF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svNF>%s</%svNF>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.vNF), input_name='vNF')), namespaceprefix_ , eol_))
        if self.digVal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdigVal>%s</%sdigVal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.digVal), input_name='digVal')), namespaceprefix_ , eol_))
        if self.dhRecbto is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdhRecbto>%s</%sdhRecbto>%s' % (namespaceprefix_ , self.gds_format_datetime(self.dhRecbto, input_name='dhRecbto'), namespaceprefix_ , eol_))
        if self.cSitNFe is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scSitNFe>%s</%scSitNFe>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.cSitNFe), input_name='cSitNFe')), namespaceprefix_ , eol_))
        if self.cSitConf is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scSitConf>%s</%scSitConf>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.cSitConf), input_name='cSitConf')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('NSU', node)
        if value is not None and 'NSU' not in already_processed:
            already_processed.add('NSU')
            self.NSU = value
            self.validate_TNSU(self.NSU)    # validate type TNSU
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'chNFe':
            chNFe_ = child_.text
            chNFe_ = self.gds_validate_string(chNFe_, node, 'chNFe')
            self.chNFe = chNFe_
        elif nodeName_ == 'CNPJ':
            CNPJ_ = child_.text
            CNPJ_ = self.gds_validate_string(CNPJ_, node, 'CNPJ')
            self.CNPJ = CNPJ_
        elif nodeName_ == 'CPF':
            CPF_ = child_.text
            CPF_ = self.gds_validate_string(CPF_, node, 'CPF')
            self.CPF = CPF_
        elif nodeName_ == 'xNome':
            obj_ = None
            self.xNome = obj_
            obj_.original_tagname_ = 'xNome'
            # validate type xNomeType2
            self.validate_xNomeType2(self.xNome)
        elif nodeName_ == 'IE':
            IE_ = child_.text
            IE_ = self.gds_validate_string(IE_, node, 'IE')
            self.IE = IE_
        elif nodeName_ == 'dEmi':
            dEmi_ = child_.text
            dEmi_ = self.gds_validate_string(dEmi_, node, 'dEmi')
            self.dEmi = dEmi_
        elif nodeName_ == 'tpNF':
            tpNF_ = child_.text
            tpNF_ = self.gds_validate_string(tpNF_, node, 'tpNF')
            self.tpNF = tpNF_
            # validate type tpNFType3
            self.validate_tpNFType3(self.tpNF)
        elif nodeName_ == 'vNF':
            vNF_ = child_.text
            vNF_ = self.gds_validate_string(vNF_, node, 'vNF')
            self.vNF = vNF_
        elif nodeName_ == 'digVal':
            digVal_ = child_.text
            digVal_ = self.gds_validate_string(digVal_, node, 'digVal')
            self.digVal = digVal_
            # validate type digValType4
            self.validate_digValType4(self.digVal)
        elif nodeName_ == 'dhRecbto':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.dhRecbto = dval_
        elif nodeName_ == 'cSitNFe':
            cSitNFe_ = child_.text
            cSitNFe_ = self.gds_validate_string(cSitNFe_, node, 'cSitNFe')
            self.cSitNFe = cSitNFe_
            # validate type cSitNFeType5
            self.validate_cSitNFeType5(self.cSitNFe)
        elif nodeName_ == 'cSitConf':
            cSitConf_ = child_.text
            cSitConf_ = self.gds_validate_string(cSitConf_, node, 'cSitConf')
            self.cSitConf = cSitConf_
            # validate type cSitConfType6
            self.validate_cSitConfType6(self.cSitConf)
# end class resCancType


class resCCeType(GeneratedsSuper):
    """Informações da carta de correção da NF-e localizadas"""
    subclass = None
    superclass = None
    def __init__(self, NSU=None, chNFe=None, dhEvento=None, tpEvento=None, nSeqEvento=None, descEvento=None, xCorrecao=None, tpNF=None, dhRecbto=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.NSU = _cast(None, NSU)
        self.chNFe = chNFe
        self.dhEvento = dhEvento
        self.validate_dhEventoType(self.dhEvento)
        self.tpEvento = tpEvento
        self.validate_tpEventoType(self.tpEvento)
        self.nSeqEvento = nSeqEvento
        self.validate_nSeqEventoType(self.nSeqEvento)
        self.descEvento = descEvento
        self.validate_descEventoType(self.descEvento)
        self.xCorrecao = xCorrecao
        self.validate_xCorrecaoType(self.xCorrecao)
        self.tpNF = tpNF
        self.validate_tpNFType7(self.tpNF)
        if isinstance(dhRecbto, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dhRecbto, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = dhRecbto
        self.dhRecbto = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resCCeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resCCeType.subclass:
            return resCCeType.subclass(*args_, **kwargs_)
        else:
            return resCCeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_dhEventoType(self, value):
        # Validate type dhEventoType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_dhEventoType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_dhEventoType_patterns_, ))
    validate_dhEventoType_patterns_ = [['^(((20(([02468][048])|([13579][26]))-02-29))|(20[0-9][0-9])-((((0[1-9])|(1[0-2]))-((0[1-9])|(1\\d)|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30)))))T(20|21|22|23|[0-1]\\d):[0-5]\\d:[0-5]\\d-0[1-4]:00$']]
    def validate_tpEventoType(self, value):
        # Validate type tpEventoType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['110110']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on tpEventoType' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_tpEventoType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpEventoType_patterns_, ))
    validate_tpEventoType_patterns_ = [['^[0-9]{6}$']]
    def validate_nSeqEventoType(self, value):
        # Validate type nSeqEventoType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_nSeqEventoType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_nSeqEventoType_patterns_, ))
    validate_nSeqEventoType_patterns_ = [['^[1-9]|[1][0-9]{0,1}|20$']]
    def validate_descEventoType(self, value):
        # Validate type descEventoType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Carta de Correção', 'Carta de Correcao']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on descEventoType' % {"value" : value.encode("utf-8")} )
    def validate_xCorrecaoType(self, value):
        # Validate type xCorrecaoType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 1000:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on xCorrecaoType' % {"value" : value.encode("utf-8")} )
            if len(value) < 15:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on xCorrecaoType' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_xCorrecaoType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_xCorrecaoType_patterns_, ))
    validate_xCorrecaoType_patterns_ = [['^[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}$']]
    def validate_tpNFType7(self, value):
        # Validate type tpNFType7, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on tpNFType7' % {"value" : value.encode("utf-8")} )
    def validate_TNSU(self, value):
        # Validate type TNSU, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_TNSU_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_TNSU_patterns_, ))
    validate_TNSU_patterns_ = [['^[0-9]{1,15}$']]
    def hasContent_(self):
        if (
            self.chNFe is not None or
            self.dhEvento is not None or
            self.tpEvento is not None or
            self.nSeqEvento is not None or
            self.descEvento is not None or
            self.xCorrecao is not None or
            self.tpNF is not None or
            self.dhRecbto is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resCCeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resCCeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resCCeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resCCeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resCCeType'):
        if self.NSU is not None and 'NSU' not in already_processed:
            already_processed.add('NSU')
            outfile.write(' NSU=%s' % (quote_attrib(self.NSU), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resCCeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.chNFe is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%schNFe>%s</%schNFe>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.chNFe), input_name='chNFe')), namespaceprefix_ , eol_))
        if self.dhEvento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdhEvento>%s</%sdhEvento>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.dhEvento), input_name='dhEvento')), namespaceprefix_ , eol_))
        if self.tpEvento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stpEvento>%s</%stpEvento>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.tpEvento), input_name='tpEvento')), namespaceprefix_ , eol_))
        if self.nSeqEvento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snSeqEvento>%s</%snSeqEvento>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.nSeqEvento), input_name='nSeqEvento')), namespaceprefix_ , eol_))
        if self.descEvento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescEvento>%s</%sdescEvento>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.descEvento), input_name='descEvento')), namespaceprefix_ , eol_))
        if self.xCorrecao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sxCorrecao>%s</%sxCorrecao>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.xCorrecao), input_name='xCorrecao')), namespaceprefix_ , eol_))
        if self.tpNF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stpNF>%s</%stpNF>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.tpNF), input_name='tpNF')), namespaceprefix_ , eol_))
        if self.dhRecbto is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdhRecbto>%s</%sdhRecbto>%s' % (namespaceprefix_ , self.gds_format_datetime(self.dhRecbto, input_name='dhRecbto'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('NSU', node)
        if value is not None and 'NSU' not in already_processed:
            already_processed.add('NSU')
            self.NSU = value
            self.validate_TNSU(self.NSU)    # validate type TNSU
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'chNFe':
            chNFe_ = child_.text
            chNFe_ = self.gds_validate_string(chNFe_, node, 'chNFe')
            self.chNFe = chNFe_
        elif nodeName_ == 'dhEvento':
            dhEvento_ = child_.text
            dhEvento_ = self.gds_validate_string(dhEvento_, node, 'dhEvento')
            self.dhEvento = dhEvento_
            # validate type dhEventoType
            self.validate_dhEventoType(self.dhEvento)
        elif nodeName_ == 'tpEvento':
            tpEvento_ = child_.text
            tpEvento_ = self.gds_validate_string(tpEvento_, node, 'tpEvento')
            self.tpEvento = tpEvento_
            # validate type tpEventoType
            self.validate_tpEventoType(self.tpEvento)
        elif nodeName_ == 'nSeqEvento':
            nSeqEvento_ = child_.text
            nSeqEvento_ = self.gds_validate_string(nSeqEvento_, node, 'nSeqEvento')
            self.nSeqEvento = nSeqEvento_
            # validate type nSeqEventoType
            self.validate_nSeqEventoType(self.nSeqEvento)
        elif nodeName_ == 'descEvento':
            descEvento_ = child_.text
            descEvento_ = self.gds_validate_string(descEvento_, node, 'descEvento')
            self.descEvento = descEvento_
            # validate type descEventoType
            self.validate_descEventoType(self.descEvento)
        elif nodeName_ == 'xCorrecao':
            xCorrecao_ = child_.text
            xCorrecao_ = self.gds_validate_string(xCorrecao_, node, 'xCorrecao')
            self.xCorrecao = xCorrecao_
            # validate type xCorrecaoType
            self.validate_xCorrecaoType(self.xCorrecao)
        elif nodeName_ == 'tpNF':
            tpNF_ = child_.text
            tpNF_ = self.gds_validate_string(tpNF_, node, 'tpNF')
            self.tpNF = tpNF_
            # validate type tpNFType7
            self.validate_tpNFType7(self.tpNF)
        elif nodeName_ == 'dhRecbto':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.dhRecbto = dval_
# end class resCCeType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TConsNFeDest'
        rootClass = TConsNFeDest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TConsNFeDest'
        rootClass = TConsNFeDest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TConsNFeDest'
        rootClass = TConsNFeDest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TConsNFeDest'
        rootClass = TConsNFeDest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from leiauteConsNFeDest_v1.01 import *\n\n')
        sys.stdout.write('import leiauteConsNFeDest_v1.01 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "TConsNFeDest",
    "TRetConsNFeDest",
    "resCCeType",
    "resCancType",
    "resNFeType",
    "retType"
]
